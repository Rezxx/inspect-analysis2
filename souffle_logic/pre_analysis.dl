ActionCondition
/*****************************
** EOS related pre-analysis **
** e.g. Actions, DBInsn etc **
******************************/

/***********
** Output **
************/

#if DEBUG
	#if VERBOSE
		.output CheckTransfer
		.output CheckEOSIO
		.output DBFindReachable
		.output DBUpdateSamePayer
		.output _DBInsn
		.output ActionData
		.output _DBDataAddress
		.output DBDataAddress1
		.output DBDataAddress2
		.output DBDataAddress3
	#endif
	.output DBRemove
	.output Action
	.output ActionParam
	.output AllActionParam
	.output ActionFuncReachable
	.output CheckNotify
	.output OnTransferAction
	.output OnTransferEOSAction
	.output DBAction
	.output DBInsn
	.output DBData
#endif

.output ActionCondition

/************/


/***********
** Action **
************/

/* functions that are actions */
.decl Action(call: Insn, action: Function)

Action(insn, action):-
	_FuncCall(insn, "apply", action),
	_FuncCall(_, action, "read_action_data"). 


/******************
** Action Params **
*******************/

/* Example:
$il = $eu (get_local[3])
$im = 40.0
$in = $il + $im
$io = $if (get_local[2])
$ip = 8.0
($iq) = memcpy($in, $io, $ip)

...
$iw = $eu (get_local[3])
$ix = load(dyn_offset: $iw + memarg.offset: 40)

$ix -> parameter
*/

/* Action data including parameters */
.decl ActionData(action: Function, var: Var)

ActionData(action, var):-
	Action(_, action),
	_MemCopy(insn, var, _, _),
	_FuncInsn(action, insn).

ActionData(action, from):-
	ActionData(action, to),
	_AssignVar(_, to, from),
	_AssignType(_, to, "Copy").
	
/* Component to order nodes within groups in descending for iteration */
.comp Order<Group, Node>{
	.decl Nodes(group: Group, key: Node)
	.decl Less(group: Group, x: Node, y: Node)
	.decl Leg(group: Group, x: Node, y: Node)
	.decl Next(group: Group, x: Node, y: Node)
	.decl First(group: Group, x: Node)
	.decl Last(group: Group, x: Node)
 
	Less(s, x, y):-
		Nodes(s, x),
		Nodes(s, y),
		to_number(x) < to_number(y).

	Leg(s, x, z):-
		Less(s, x, y),
		Less(s, y, z).

	Next(s, x, y):-
		Less(s, x, y),
		!Leg(s, x, y).

	First(s, x):-
		Nodes(s, x),
		!Less(s, _, x).

	Last(s, x):-
		Nodes(s, x),
		!Less(s, x, _).
}

/* all action parameters, offset is the memeory location */ 
.decl _ActionParam(action: Function, base: Var, offset: symbol)

// data = var + offset
_ActionParam(action, base, num):-
	ActionData(action, data),
	// var
	_AssignVar(_, data, var),
	_AssignType(_, var, "Copy"),
	_AssignVar(_, var, base),
	// offset
	_AssignVar(_, data, offset),
	_SimpleAssign(_, offset, num).

// re-order the parameter to get the index
.init order = Order<Function, symbol>

order.Nodes(action, num):-
	_ActionParam(action, _, num).

/* action parameters and its index */
.decl ActionParam(action: Function, base: Var, offset: symbol, index: number)

// first parameter
ActionParam(action, base, offset, 0):-
	_ActionParam(action, base, offset),
	order.Last(action, offset).

// the rest
ActionParam(action, base, offset, n+1):-
	ActionParam(action, base, next, n),
	order.Next(action, offset, next).

/* easy to access action parameter name,
	not presented in the actual code  */
.decl AllActionParam(action: Function, index: number, name: Var)

AllActionParam(action, index, cat(cat(action, "_"), to_string(index))):-
	ActionParam(action, _, _, index).


/***********************
** Reachable function **
************************/

/* function calls that are reachable from the action*/
.decl ActionFuncReachable(from: Function, to: Function, func_call: Insn)

ActionFuncReachable(action, to, insn):-
	Action(_, action),
	_FuncCall(insn, action, to).

ActionFuncReachable(action, to, insn):-
	ActionFuncReachable(action, mid, _),
	_FuncCall(insn, mid, to).


/*****************
** Action Types **
******************/

/* checking if an action is notifiable,
actions called in toBranch are notifiable */
.decl CheckNotify(insn: Insn, toBranch: Insn)

CheckNotify(insn, toBranch):-
	_FuncInsn("apply", insn),
	// the false branch of _self == _code
	_Branch(insn, toBranch, _, ifVar),
	_AssignType(_, ifVar, "Eq"),
	_AssignVar(_, ifVar, x),
	pointer.VarPointsTo(x, "_self"),
	_AssignVar(_, ifVar, y),
	x != y,
	pointer.VarPointsTo(y, "_code").

/* check if action is notifiable on transfer,
actions called in toBranch are notifiable on transfer */
.decl CheckTransfer(insn: Insn, toBranch: Insn)

CheckTransfer(insn, toBranch):-
	_SimpleAssign(_, transferVar, "-3617168760277827584"),
	_AssignVar(_, ifVar, transferVar),
	_Branch(insn, _, toBranch, ifVar),
	// check is after checking _self != _code 
	// eliminate action named 'transfer'
	CheckNotify(_, notifyHead),
	DominateBB(notifyHead, transferHead),
	BasicBlockHead(transferHead, insn).

/* check if action is notifiable by eosio.token,
actions called in toBranch are notifiable by eosio.token */
.decl CheckEOSIO(insn: Insn, toBranch: Insn)

CheckEOSIO(insn, toBranch):-
	_SimpleAssign(_, eosVar, "6138663591592764928"),
	_AssignVar(_, ifVar, eosVar),
	_Branch(insn, _, toBranch, ifVar).


/* actions that are notifiable on transfer */
.decl OnTransferAction(call: Insn, action: Function)

OnTransferAction(call, action):-
	Action(call, action),
	CheckTransfer(_, toBranch),
	BasicBlockHead(toBranch, call).

/* actions that are notifiable on transfer by eosio.token */
.decl OnTransferEOSAction(call: Insn, action: Function)
OnTransferEOSAction(call, action):-
	OnTransferAction(call, action),
	BasicBlockHead(callHead, call), 
	CheckEOSIO(_, checkedHead),
	DominateBB(checkedHead, callHead).

/* encoded action names are used as the last condiiton before calling action */
.decl ActionCondition(action: Function, constant: symbol)

ActionCondition(action, constant):-
	Action(call, action),
	BasicBlockHead(toBranch, call),
	_SimpleAssign(_, constVar, constant),
	_AssignVar(_, ifVar, constVar),
	(_Branch(_, _, toBranch, ifVar);
    _Branch(_, toBranch, _, ifVar)).

/* actions that contains dbOps */
.decl DBAction(action: Function)

DBAction(action):-
	DBInsn(dbInsn, _),
	ActionFuncReachable(action, _, dbInsn).


/***************
** DB Related **
****************/

/* DB remove insn and its payer */

/* payer of db_remove is obtained from db_find(s) */
.decl _DBRemove(removeInsn: Insn, findInsn: Insn, payer: Var)

_DBRemove(removeInsn, findInsn, payer):-
	ActionFuncReachable(action, "db_remove_i64", removeInsn),
	ActionFuncReachable(action, "db_find_i64", findInsn),
	_ActualArgs(findInsn, _, 3, payer).

/* for each db_remove insn, db_find_1 can reach to db_find2 */
.decl DBFindReachable(removeInsn: Insn, findInsn1: Insn, findInsn2: Insn)

DBFindReachable(removeInsn, findInsn1, findInsn2):-
	_DBRemove(removeInsn, findInsn1, _),
	_DBRemove(removeInsn, findInsn2, _ ),
	findInsn1 != findInsn2,
	//  reachable in BB
	(ReachableInBB(findInsn1, findInsn2);
	// reachable btw BB
	BasicBlockHead(head1, findInsn1),
	BasicBlockHead(head2, findInsn2),
	ReachableBtwBB(head1, head2)).

/* select the closest db_find for db_remove */
.decl DBRemove(insn: Insn, payer: Var)

DBRemove(removeInsn, payer):-
	_DBRemove(removeInsn, findInsn, payer),
	!DBFindReachable(removeInsn, findInsn, _).


/* DB update on the same payer */
.decl DBUpdateSamePayer(insn: Insn)

// when the payer points to '0'
DBUpdateSamePayer(insn):-
	_DBUpdate(insn, _, payer, _),
	pointer.VarPointsTo(payer, var),
	_SimpleAssign(_, var, "0").

/* all DBOps and their payer variables*/
.decl _DBInsn(insn: Insn, payer: Var)

_DBInsn(insn, payer):-
	_DBStore(insn, _, payer, _, _);
	_DBUpdate(insn, _, payer, _);
	DBRemove(insn, payer).

/* if payers are _self or _code for easier debug process */
.decl DBInsn(insn: Insn, payer: Var)

// if payer is _self
DBInsn(insn, "_self"):-
	_DBInsn(insn, payer),
	pointer.VarPointsTo(payer,"_self").

// if payer is _code
DBInsn(insn, "_code"):-
	_DBInsn(insn, payer),
	pointer.VarPointsTo(payer,"_code").

// else keep the same payer var
DBInsn(insn, payer):-
	_DBInsn(insn, payer),
	!pointer.VarPointsTo(payer,"_code"),
	!pointer.VarPointsTo(payer,"_self").


/***************
** DB Payload **
****************/

// Example
/*
store(dyn_offset = $um + memarg.offset: 8) = $up

....

$uq = $tv (get_local[4])
$ur = 16.0
$us = $uq + $ur
$ut = $ue (get_local[5])
$uu = 8.0
($uv) = memcpy($us, $ut, $uu)

....

$vo = $tv (get_local[4])
$vp = 16.0
$vq = $vo + $vp
($vs) = db_store_i64($vi, $vj, $vk, $vm, $vq, $vr)

*/

// Done via either memcpy or store the address that stores the data

// The one used for dbOps
// address with offset
.decl _DBDataAddress(insn: Insn, dynOffset: Var, offset: symbol)

_DBDataAddress(insn, dynOffset, offset):-
	(_DBUpdate(insn, _, _, address);
	_DBStore(insn, _, _, _, address)),
	_AssignType(_, address, "Add"),
	_AssignVar(_, address, dynOffset),
	_AssignVar(_, address, memarg),
	_SimpleAssign(_, memarg, offset),
	dynOffset != memarg.


// The one that used for memcpy
// when the address is form of x = y + z
.decl DBDataAddress1(insn: Insn, dynOffset: Var)

DBDataAddress1(insn, from):-
	_DBDataAddress(insn, dynOffset1, offset),
	_MemCopy(_, to, from, _),
	_AssignVar(_, to, dynOffset2),
	_AssignVar(_, to, memarg),
	_SimpleAssign(_, memarg, offset),
	_AssignVar(_, dynOffset1, base),
	_AssignVar(_, dynOffset2, base).


// when address is the form of x = y
.decl DBDataAddress2(insn: Insn, dynOffset: Var)

DBDataAddress2(insn, from):-
	(_DBUpdate(insn, _, _, address);
	_DBStore(insn, _, _, _, address)),
	_AssignType(_, address, "Copy"),
	pointer.VarPointsTo(address, base),
	pointer.VarPointsTo(to, base),
	_MemCopy(_, to, from, _).


// when address is used directly to store data address
.decl DBDataAddress3(insn: Insn, var: Var)

DBDataAddress3(insn, var):-
	(_DBUpdate(insn, _, _, address);
	_DBStore(insn, _, _, _, address)),
	_AssignType(_, address, "Copy"),
	_AssignVar(_, address, base),
	_Store(_, storeDynOffset, _, var),
	_AssignVar(_, storeDynOffset, base).


// The actual data
.decl DBData(insn: Insn, var: Var)

DBData(insn, var):-
	(DBDataAddress1(insn, dynOffset);
	DBDataAddress2(insn, dynOffset)),
	_Store(_, storeDynOffset, _, var),
	_AssignVar(_, dynOffset, base),
	_AssignVar(_, storeDynOffset, base).


// when memarg.offset != 0
DBData(insn, var):-
	DBDataAddress3(insn, addressVar),
	// dynOffset = base
	// offset = num1
	// addressVar = dynOffset + offset
	_AssignVar(_, addressVar, dynOffset),
	_AssignVar(_, dynOffset, base),
	_AssignVar(_, addressVar, offset),
	_SimpleAssign(_, offset, num1),
	_Store(_, storeDynOffset, num2, var),
	_AssignVar(_, storeDynOffset, base),
	to_number(num1) = num2.


// when memarg.offset == 0
DBData(insn, var):-
	DBDataAddress3(insn, addressVar),
	// addressVar = dynOffset
	_AssignVar(_, addressVar, base),
	_Store(_, dynOffset, 0, var),
	_AssignVar(_, dynOffset, base).
	




