
.comp Pointer {

#if DEBUG
	#if VERBOSE
		.output RootVar
		.output _VarPointsTo
		.output _InterCopyAssign
		.output IntraCopyAssign
		.output InterCopyAssign
		.output ExtendedRootVar
		.output ExtendedCopyAssign
		.output ExtendedVarPointsTo
		.output FirstLoadActionParam
		.output StoreActionParam
		.output StoreActionParamAddress
		.output LoadActionParamAddress
	#endif
	.output LoadActionParam
	.output VarPointsTo
#endif


.decl RootVar(var: Var)

// Root Var includes const, arithmetic result and entry point parameters
RootVar(var):-
	_AssignType(_, var, _),
	!_AssignType(_, var, "Copy"),
	!_AssignType(_, var, "Call").

// Global variable
RootVar("$a").

// Reciever
RootVar("_self").

// Code
RootVar("_code").

// assume uncalled funcation is the entry point
RootVar(var):-
	_FormalArgs(_, func, _, var),
	!_FuncCall(_, _, func).



// copys wihtin function
.decl IntraCopyAssign(insn: Insn, to: Var, from: Var)

IntraCopyAssign(insn, to, from):-
	_AssignVar(insn, to, from),
	_AssignType(insn, to, "Copy"),
	to != "$a".



// taint for action parameter

.decl FirstLoadActionParam(insn: Insn, to: Var, from: Var)

// direct load action data from memcpy
FirstLoadActionParam(insn, to, name):-
	_Load(insn, from, offset, to),
	_AssignVar(_, from, base),
	ActionParam(action, base, offset_symbol, index),
	offset = to_number(offset_symbol),
	AllActionParam(action, index, name).


// sepcial VarPointsTo for action param to avoid double negation
.decl _VarPointsTo(var1: Var, var2: Var)

_VarPointsTo(var, var):-
	RootVar(var).

// Copys
_VarPointsTo(to, var):-
	_InterCopyAssign(to, from),
	_VarPointsTo(from, var).

// store action data directly
.decl StoreActionParam(address: Var, offset: number, var: Var)

StoreActionParam(address, offset, to):-
	_VarPointsTo(var, to),
	FirstLoadActionParam(_, _, to),
	_Store(_, address_var, offset, var), 
	_AssignVar(_, address_var, address).

// store the address that can point to action data
.decl StoreActionParamAddress (insn: Insn, dyn_offset: Var, offset: number, address_var: Var, index: number, param: Var)

StoreActionParamAddress(insn, dyn_offset, offset, address_var, n + 1, param):-
	// the store statement for dynOffset
	_Store(insn, dyn_offset, offset, address_var), 
	// the store statement for action param / address
	(StoreActionParam(stored_dyn_offset_1, stored_offset, param), n = 0;
	StoreActionParamAddress(stored_insn, stored_dyn_offset_1, stored_offset, _, n, param)),
	_VarPointsTo(address_var, base),
	// address points to the same place
	_AssignVar(_, base, stored_dyn_offset_2),
	_VarPointsTo(stored_dyn_offset_1, var),
	_VarPointsTo(stored_dyn_offset_2, var),
	// the stored offset is same
	_AssignVar(_,base, offset_var),
	_SimpleAssign(_, offset_var, num),
	stored_offset = to_number(num).
	

// load by calculating offset for stored address
.decl LoadActionParamAddress(insn: Insn, to: Var, stored_address: Var, index: number, param: Var)

// load_dyn_offset_root = load_dyn_offset + offset_var
// ..... load_dyn_offset_var <- load_dyn_offset_root
// load(load_dyn_offset_var + load_offset)
LoadActionParamAddress(insn, to, stored_address, n-1, param):-
	StoreActionParamAddress(_, store_dyn_offset, store_offset, stored_address, n, param),
	_Load(insn, load_dyn_offset_var, load_offset, to),
	_VarPointsTo(load_dyn_offset_var, load_dyn_offset_root),
	_AssignVar(_, load_dyn_offset_root, load_dyn_offset),
	_VarPointsTo(load_dyn_offset, var),
	_VarPointsTo(store_dyn_offset, var),
	_AssignVar(_, load_dyn_offset_root, offset_var),
	_SimpleAssign(_, offset_var, offset),
	store_offset = to_number(offset) + load_offset.



.decl LoadActionParam(insn: Insn, to: Var, from: Var)

// load action data by directly mataching offset
LoadActionParam(insn, to, from):-
	FirstLoadActionParam(insn, to, from).

LoadActionParam(insn, to, from):-
	StoreActionParam(address, offset, from),
	_Load(insn, address_var, offset, to),
	_AssignVar(_, address_var, address).

// load using loaded address
LoadActionParam(insn, to, param):-
	LoadActionParamAddress(_, address, _, 0, param),
	_Load(insn, address, 0, to).


// load action parameters/address
RootVar(from),
IntraCopyAssign(insn, to, from):-
	LoadActionParam(insn, to, from);
	LoadActionParamAddress(insn, to, from, _, _).


// intermediate for action param to avoid double negation
.decl _InterCopyAssign(to: Var, from: Var)

_InterCopyAssign(to, from):-
	IntraCopyAssign(_, to, from).

// argument mapping
_InterCopyAssign(to, from):-
	_ActualArgs(_, func, index, from),
	_FormalArgs(_, func, index, to).

// return value mapping
_InterCopyAssign(to, from):-
	_FormalReturn(_, func, from),
	_ActualReturn(_, func, to).

// copys include mapping through parameters and return values
.decl InterCopyAssign(to: Var, from: Var)

InterCopyAssign(to, from):-
	_InterCopyAssign(to, from).

// load mapping, very crude but enough for checking alias
InterCopyAssign(to, from):-
	_Load(insn, from, _, to),
	!LoadActionParam(insn, _, _),
	!LoadActionParamAddress(insn, _, _, _, _).



.decl VarPointsTo(var1: Var, var2: Var)

// For require_auth, the user should only come from apply(...) or get_self()
// could restrict to use-def chain of require_auth and dbOps vars

// root -> root
VarPointsTo(var, var):-
	RootVar(var).

// Copys
VarPointsTo(to, var):-
	InterCopyAssign(to, from),
	VarPointsTo(from, var).




// inlcuding arithmetic operations
.decl ExtendedRootVar(var: Var)

ExtendedRootVar(var):-
	RootVar(var),
	!_AssignType(_, var, "Add"),
	!_AssignType(_, var, "Sub").



.decl ExtendedCopyAssign(to: Var, from: Var)

ExtendedCopyAssign(to, from):-
	InterCopyAssign(to, from).

ExtendedCopyAssign(to, from):-
	_AssignVar(insn, to, from),
	(_AssignType(insn, to, "Add");
	_AssignType(insn, to, "Sub")).



.decl ExtendedVarPointsTo(var: Var, to: Var)

// root -> root
ExtendedVarPointsTo(var, var):-
	ExtendedRootVar(var).

// Copys
ExtendedVarPointsTo(to, var):-
	ExtendedCopyAssign(to, from),
	ExtendedVarPointsTo(from, var).


// Propagation of parameters in apply including load/store
.comp ApplyParam{
	#if DEBUG && VERBOSE
		.output VarPointsToApplyParam
		.output StoreApplyParam
		.output LoadApplyParam
	#endif

	.decl VarPointsToApplyParam(var: Var)

	VarPointsToApplyParam(var):-
		ExtendedVarPointsTo(var, param),
		VarPointsToApplyParam(param).

	// offset with store param insn
	.decl StoreApplyParam(insn: Insn, offset: Var)

	StoreApplyParam(insn, offset):-
		_Store(insn, offset, _, var),
		VarPointsToApplyParam(var).


	.decl LoadApplyParam(storeInsn: Insn, loadInsn: Insn, loadTo: Var)

	// Load from store param by matching offsets
	LoadApplyParam(storeInsn, loadInsn, loadTo):-
		StoreApplyParam(storeInsn, storeOffset),
		_Load(loadInsn, loadOffset, _, loadTo),
		!LoadActionParam(loadInsn, _, _),
		!LoadActionParamAddress(loadInsn, _, _, _, _),
		ExtendedVarPointsTo(storeOffset, to),
		ExtendedVarPointsTo(loadOffset, to).


	VarPointsToApplyParam(var):-
		LoadApplyParam(_, _, var).

	// may not be useful

	// reachable from store to load
	// .init store_dom_load = CFGDom

	// store_dom_load.Src(insn):-
	// 	StoreParam(insn, _).

	// store_dom_load.Target (insn):-
	// 	StoreLoadParam(_, insn, _).

	// VarPointsToParam(var):-
	// 	StoreLoadParam(store, load, var),
	// 	(store_dom_load.IntraSrcDomTarget(store, load);
	// 	store_dom_load.InterSrcDomTarget(store, load)).
}

// Taint self(reciever)
.init self = ApplyParam

self.VarPointsToApplyParam(var):-
		_FormalArgs(_, "apply", 0, var).

self.VarPointsToApplyParam(var):-
	_ActualReturn(_, "current_receiver", var).


// Taint code
.init code = ApplyParam

code.VarPointsToApplyParam(var):-
		_FormalArgs(_, "apply", 1, var).



VarPointsTo(var, "_self"):-
	self.VarPointsToApplyParam(var).

VarPointsTo(var, "_code"):-
	code.VarPointsToApplyParam(var).


}
