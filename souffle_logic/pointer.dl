
.comp Pointer {

#if DEBUG
	#if VERBOSE
		.output RootVar
		.output IntraCopyAssign
		.output InterCopyAssign
		.output FirstLoadActionParam
		.output StoreActionParam
		.output StoreActionParamAddress
		.output LoadActionParamAddress
	#endif
	.output LoadActionParam
	.output VarPointsTo
	.output _VarPointsTo
#endif

_AssignVar(insn, var, "_self"),
_AssignType(insn, var, "Copy"):-
	_FormalArgs(_, "apply", 0, var),
	insn = "apply_self".

_AssignVar(insn, var, "_code"),
_AssignType(insn, var, "Copy"):-
	_FormalArgs(_, "apply", 1, var),
	insn = "apply_code".

_AssignVar(insn, to, from),
_AssignType(insn, to, "Copy"):-
	_Phi(insn, to, from).

.decl RootVar(var: Var)

// Root Var includes const, arithmetic result and entry point parameters
RootVar(var):-
	_AssignType(_, var, _),
	!_AssignType(_, var, "Copy"),
	!_AssignType(_, var, "Call").

// Global variable
RootVar("$a").

// Reciever
RootVar("_self").

// Code
RootVar("_code").

// assume uncalled funcation is the entry point
RootVar(var):-
	_FormalArgs(_, func, _, var),
	!_FuncCall(_, _, func),
	!_FormalArgs(_, "apply", 0, var),
	!_FormalArgs(_, "apply", 1, var).



// copys wihtin function
.decl IntraCopyAssign(insn: Insn, to: Var, from: Var)

IntraCopyAssign(insn, to, from):-
	_AssignVar(insn, to, from),
	_AssignType(insn, to, "Copy"),
	to != "$a".

// intermediate for action param to avoid double negation
.decl _InterCopyAssign(to: Var, from: Var)

_InterCopyAssign(to, from):-
	IntraCopyAssign(_, to, from).

// argument mapping
_InterCopyAssign(to, from):-
	_ActualArgs(_, func, index, from),
	_FormalArgs(_, func, index, to).

// return value mapping
_InterCopyAssign(to, from):-
	_FormalReturn(_, func, from),
	_ActualReturn(_, func, to).

// sepcial VarPointsTo for action param to avoid double negation
.decl _VarPointsTo(var1: Var, var2: Var)

_VarPointsTo(var, var):-
	RootVar(var).

// Copys
_VarPointsTo(to, var):-
	_InterCopyAssign(to, from),
	_VarPointsTo(from, var).


// taint for action parameter
.decl FirstLoadActionParam(insn: Insn, to: Var, from: Var)

// direct load action data from memcpy
FirstLoadActionParam(insn, to, name):-
	_Load(insn, from, offset, to),
	_AssignVar(_, from, base),
	ActionParam(action, base, offset_symbol, index),
	offset = to_number(offset_symbol),
	AllActionParam(action, index, name).

FirstLoadActionParam("apply_self", to, "_self"):-
	_FormalArgs(_, "apply", 0, to).

FirstLoadActionParam("apply_code", to, "_code"):-
	_FormalArgs(_, "apply", 1, to).

FirstLoadActionParam(insn, var, "_self"):-
	_ActualReturn(insn, "current_receiver", var).



// store action data directly
.decl StoreActionParam(insn: Insn, address: Var, offset: number, var: Var)

StoreActionParam(insn, address, offset, to):-
	_VarPointsTo(var, to),
	FirstLoadActionParam(_, _, to),
	_Store(insn, address_var, offset, var), 
	_AssignVar(_, address_var, address).

// store the address that can point to action data
.decl StoreActionParamAddress (insn: Insn, dyn_offset: Var, offset: number, address_var: Var, index: number, param: Var)

StoreActionParamAddress(insn, dyn_offset, offset, address_var, n + 1, param):-
	// the store statement for dynOffset
	_Store(insn, dyn_offset, offset, address_var), 
	// the store statement for action param / address
	(StoreActionParam(_, stored_dyn_offset_1, stored_offset, param), n = 0;
	StoreActionParamAddress(_, stored_dyn_offset_1, stored_offset, _, n, param)),
	_VarPointsTo(address_var, base),
	// address points to the same place
	_AssignVar(_, base, stored_dyn_offset_2),
	_VarPointsTo(stored_dyn_offset_1, var),
	_VarPointsTo(stored_dyn_offset_2, var),
	// the stored offset is same
	_AssignVar(_,base, offset_var),
	_SimpleAssign(_, offset_var, num),
	to_string(stored_offset) = num,
	n < 5.
	

// load by calculating offset for stored address
.decl LoadActionParamAddress(insn: Insn, to: Var, stored_address: Var, index: number, param: Var)

// load_dyn_offset_root = load_dyn_offset + offset_var
// ..... load_dyn_offset_var <- load_dyn_offset_root
// load(load_dyn_offset_var + load_offset)
LoadActionParamAddress(insn, to, stored_address, n-1, param):-
	StoreActionParamAddress(_, store_dyn_offset, store_offset, stored_address, n, param),
	_Load(insn, load_dyn_offset_var, load_offset, to),
	_VarPointsTo(load_dyn_offset_var, load_dyn_offset_root),
	_AssignVar(_, load_dyn_offset_root, load_dyn_offset),
	_VarPointsTo(load_dyn_offset, var),
	_VarPointsTo(store_dyn_offset, var),
	_AssignVar(_, load_dyn_offset_root, offset_var),
	_SimpleAssign(_, offset_var, offset),
	store_offset = to_number(offset) + load_offset.



.decl LoadActionParam(insn: Insn, to: Var, from: Var)

// pass as copy assignment
LoadActionParam(insn, to, from):-
	FirstLoadActionParam(insn, to, from).

// load parameter by directly mataching offset
LoadActionParam(insn, to, from):-
	StoreActionParam(_, store_dyn_offset, offset, from),
	_Load(insn, load_dyn_offset, offset, to),
	_VarPointsTo(store_dyn_offset, address),
	_VarPointsTo(load_dyn_offset, address).

// load parameter by computing the offset 
LoadActionParam(insn, to, from):-
	StoreActionParam(_, store_dyn_offset, store_offset, from),
	_Load(insn, load_address_var, load_offset, to),
	_VarPointsTo(load_address_var, load_address),
	_AssignVar(_, load_address, load_dyn_offset),
	_VarPointsTo(load_dyn_offset, dyn_offset),
	_VarPointsTo(store_dyn_offset, dyn_offset),
	_AssignVar(_, load_address, load_offset_var),
	_SimpleAssign(_, load_offset_var, num),
	store_offset = to_number(num) + load_offset.


// load using loaded address
LoadActionParam(insn, to, param):-
	LoadActionParamAddress(_, address, _, 0, param),
	_Load(insn, address, 0, to).


// load action parameters/address
RootVar(from),
IntraCopyAssign(insn, to, from):-
	LoadActionParam(insn, to, from);
	LoadActionParamAddress(insn, to, from, _, _).


.decl InterCopyAssign(to: Var, from: Var)

InterCopyAssign(to, from):-
	_Load(_, from, _, to),
	!_InterCopyAssign(to, _).

InterCopyAssign(to, from):-
	_InterCopyAssign(to, from).

.decl VarPointsTo(var1: Var, var2: Var)

VarPointsTo(var, to):-
	_VarPointsTo(var, to).

VarPointsTo(var, to):-
	VarPointsTo(from, to),
	InterCopyAssign(var, from).

}
